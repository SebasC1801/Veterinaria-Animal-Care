// Sistema Veterinario - Implementaci√≥n de Patrones de Dise√±o
// JavaScript para la aplicaci√≥n web

// ===== GLOBAL VARIABLES =====
let authSystem;
let consultationSystem;
let veterinarySystem;
let petToDelete = null;

// ===== AUTHENTICATION SYSTEM =====
class AuthenticationSystem {
    constructor() {
        this.users = [];
        this.currentUser = null;
        this.loadUsersFromStorage();
        
        // Define role permissions
        this.rolePermissions = {
            admin: {
                canManageUsers: true,
                canManagePets: true,
                canManageAppointments: true,
                canSetAppointmentPriority: true,
                canDeletePets: true,
                canViewAllData: true,
                canManageSystem: true
            },
            employee: {
                canManageUsers: false,
                canManagePets: true,
                canManageAppointments: true,
                canSetAppointmentPriority: true,
                canDeletePets: false,
                canViewAllData: true,
                canManageSystem: false
            },
            user: {
                canManageUsers: false,
                canManagePets: false,
                canManageAppointments: false,
                canSetAppointmentPriority: false,
                canDeletePets: false,
                canViewAllData: false,
                canManageSystem: false
            }
        };
        
        // Initialize with default users if no users exist in localStorage
        const hasStoredUsers = localStorage.getItem('veterinaryUsers');
        if (!hasStoredUsers) {
            this.initializeDefaultUsers();
        }
    }

    initializeDefaultUsers() {
        const defaultUsers = [
            {
                id: 1,
                name: "Administrador",
                email: "admin@veterinaria.com",
                password: "admin123",
                role: "admin",
                phone: "+57 300 000 0001",
                createdAt: new Date().toISOString()
            },
            {
                id: 2,
                name: "Dr. Garc√≠a",
                email: "dr.garcia@veterinaria.com",
                password: "empleado123",
                role: "employee",
                phone: "+57 300 000 0002",
                createdAt: new Date().toISOString()
            },
            {
                id: 3,
                name: "Juan P√©rez",
                email: "juan@email.com",
                password: "usuario123",
                role: "user",
                phone: "+57 300 000 0003",
                createdAt: new Date().toISOString()
            }
        ];
        
        this.users = defaultUsers;
        this.saveUsersToStorage();
    }

    registerUser(userData) {
        // Validate required fields
        if (!userData.name || !userData.email || !userData.password || !userData.role || !userData.phone) {
            throw new Error('Todos los campos son obligatorios');
        }

        // Validate name has surname
        if (userData.name.trim().split(' ').length < 2) {
            throw new Error('El nombre debe incluir nombre y apellido');
        }

        // Validate password length
        if (userData.password.length < 6) {
            throw new Error('La contrase√±a debe tener al menos 6 caracteres');
        }

        // Validate password confirmation
        if (userData.password !== userData.confirmPassword) {
            throw new Error('Las contrase√±as no coinciden');
        }

        // Validate phone has numbers
        if (!/\d/.test(userData.phone)) {
            throw new Error('El tel√©fono debe contener al menos n√∫meros');
        }

        // Check if email already exists
        if (this.users.find(user => user.email === userData.email)) {
            throw new Error('Este correo electr√≥nico ya est√° registrado');
        }

        // Create new user
        const newUser = {
            id: this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1,
            name: userData.name.trim(),
            email: userData.email.trim().toLowerCase(),
            password: userData.password, // In real app, this should be hashed
            role: userData.role,
            phone: userData.phone.trim(),
            createdAt: new Date().toISOString()
        };

        this.users.push(newUser);
        this.saveUsersToStorage();
        return newUser;
    }

    loginUser(email, password, role) {
        console.log('üîç Buscando usuario con:');
        console.log('üìß Email buscado:', email.toLowerCase());
        console.log('üîë Password buscado:', password);
        console.log('üë§ Role buscado:', role);
        
        console.log('üìã Usuarios disponibles:');
        this.users.forEach(u => {
            console.log(`- ID: ${u.id}, Email: ${u.email}, Role: ${u.role}, Password: ${u.password}`);
        });
        
        const user = this.users.find(u => 
            u.email === email.toLowerCase() && 
            u.password === password && 
            u.role === role
        );

        if (!user) {
            console.log('‚ùå No se encontr√≥ usuario con esas credenciales exactas');
            throw new Error('Credenciales incorrectas');
        }

        console.log('‚úÖ Usuario encontrado:', user);
        this.currentUser = user;
        this.saveCurrentUserToStorage();
        return user;
    }

    logout() {
        this.currentUser = null;
        localStorage.removeItem('currentUser');
    }

    getCurrentUser() {
        if (!this.currentUser) {
            const storedUser = localStorage.getItem('currentUser');
            if (storedUser) {
                try {
                    this.currentUser = JSON.parse(storedUser);
                    console.log('‚úÖ Usuario cargado desde localStorage:', this.currentUser);
                } catch (error) {
                    console.error('‚ùå Error al parsear usuario desde localStorage:', error);
                    localStorage.removeItem('currentUser');
                    this.currentUser = null;
                }
            }
        }
        return this.currentUser;
    }

    hasRole(requiredRole) {
        const user = this.getCurrentUser();
        if (!user) return false;

        const roleHierarchy = {
            'user': 1,
            'employee': 2,
            'admin': 3
        };

        return roleHierarchy[user.role] >= roleHierarchy[requiredRole];
    }

    hasPermission(permission) {
        if (!this.currentUser) return false;
        const userRole = this.currentUser.role;
        return this.rolePermissions[userRole] && this.rolePermissions[userRole][permission];
    }

    getRoleDisplayName(role) {
        const roleNames = {
            admin: 'Administrador',
            employee: 'Empleado',
            user: 'Usuario'
        };
        return roleNames[role] || role;
    }

    isLoggedIn() {
        return this.currentUser !== null;
    }

    saveUsersToStorage() {
        try {
            localStorage.setItem('veterinaryUsers', JSON.stringify(this.users));
            console.log('‚úÖ Usuarios guardados en localStorage:', this.users.length, 'usuarios');
        } catch (error) {
            console.error('‚ùå Error al guardar usuarios en localStorage:', error);
        }
    }

    loadUsersFromStorage() {
        try {
            const stored = localStorage.getItem('veterinaryUsers');
            if (stored) {
                this.users = JSON.parse(stored);
                console.log('‚úÖ Usuarios cargados desde localStorage:', this.users.length, 'usuarios');
            } else {
                console.log('üìù No hay usuarios guardados en localStorage');
            }
        } catch (error) {
            console.error('‚ùå Error al cargar usuarios desde localStorage:', error);
            this.users = [];
        }
    }

    saveCurrentUserToStorage() {
        try {
            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            console.log('‚úÖ Usuario guardado en localStorage:', this.currentUser);
        } catch (error) {
            console.error('‚ùå Error al guardar usuario en localStorage:', error);
        }
    }
}

// ===== RESPONSIVE DESIGN - MEN√ö M√ìVIL =====
function toggleMobileMenu() {
    const nav = document.getElementById('mainNav');
    const toggle = document.getElementById('mobileMenuToggle');
    
    nav.classList.toggle('mobile-menu-open');
    toggle.classList.toggle('active');
    
    // Recalcular alto del header por cambios del men√∫ m√≥vil
    applyHeaderOffset();
    
    console.log('üì± Men√∫ m√≥vil toggled');
}

function closeMobileMenu() {
    const nav = document.getElementById('mainNav');
    const toggle = document.getElementById('mobileMenuToggle');
    
    nav.classList.remove('mobile-menu-open');
    toggle.classList.remove('active');

    // Recalcular alto del header al cerrar el men√∫
    applyHeaderOffset();
}

// Calcula din√°micamente el alto del header y lo aplica a la variable CSS
function applyHeaderOffset() {
    const header = document.getElementById('mainHeader');
    if (!header) return;
    const height = header.offsetHeight || 0;
    document.documentElement.style.setProperty('--header-height', height + 'px');
}

// Cerrar men√∫ m√≥vil al hacer clic en un enlace
function setupMobileMenuHandlers() {
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.addEventListener('click', closeMobileMenu);
    });
    
    // Cerrar men√∫ al hacer clic fuera
    document.addEventListener('click', function(event) {
        const nav = document.getElementById('mainNav');
        const toggle = document.getElementById('mobileMenuToggle');
        
        if (!nav.contains(event.target) && !toggle.contains(event.target)) {
            closeMobileMenu();
        }
    });
}

// ===== WIZARD DE REGISTRO =====

let currentWizardStep = 1;
const totalWizardSteps = 4;

function initializeRegistrationWizard() {
    console.log('üßô‚Äç‚ôÇÔ∏è Inicializando wizard de registro mejorado...');
    
    // Mostrar el primer paso
    showWizardStep(1);
    updateProgressBar(1);
    updateStepHelpText(1);
    
    // Configurar eventos de clic en los pasos para navegaci√≥n directa
    document.querySelectorAll('.wizard-step').forEach(step => {
        step.addEventListener('click', function() {
            const stepNumber = parseInt(this.dataset.step);
            goToStep(stepNumber);
        });
    });
    
    // Configurar eventos de los botones de navegaci√≥n
    const prevBtn = document.getElementById('prevStepBtn');
    const nextBtn = document.getElementById('nextStepBtn');
    const submitBtn = document.getElementById('submitRegistrationBtn');
    
    if (prevBtn) {
        prevBtn.addEventListener('click', () => changeStep(-1));
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', () => changeStep(1));
    }
    
    if (submitBtn) {
        submitBtn.addEventListener('click', submitRegistration);
    }
    
    console.log('‚úÖ Wizard de registro mejorado inicializado correctamente');
}

// Funci√≥n para navegar directamente a un paso espec√≠fico
function goToStep(stepNumber) {
    // Validar que el paso sea accesible
    if (stepNumber > 1) {
        const canProceed = validateStepsUpTo(stepNumber - 1);
        if (!canProceed) {
            showNotification('Complete los pasos anteriores antes de continuar', 'warning');
            return;
        }
    }
    
    currentWizardStep = stepNumber;
    showWizardStep(stepNumber);
    updateProgressBar(stepNumber);
    updateStepHelpText(stepNumber);
}

// Funci√≥n para actualizar la barra de progreso
function updateProgressBar(currentStep) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    if (progressFill && progressText) {
        const percentage = (currentStep / 4) * 100;
        progressFill.style.width = percentage + '%';
        progressText.innerHTML = `<i class="fas fa-chart-line"></i> ${percentage}% Completado`;
    }
}

// Funci√≥n para actualizar el texto de ayuda del paso
function updateStepHelpText(currentStep) {
    const stepHelpText = document.getElementById('stepHelpText');
    const helpTexts = {
        1: 'Complete la informaci√≥n b√°sica para continuar',
        2: 'Agregue los detalles f√≠sicos de la mascota',
        3: 'Proporcione los datos de contacto del propietario',
        4: 'Revise toda la informaci√≥n antes de guardar'
    };
    
    if (stepHelpText) {
        stepHelpText.textContent = helpTexts[currentStep] || '';
    }
}

// Funci√≥n para validar pasos hasta un n√∫mero espec√≠fico
function validateStepsUpTo(stepNumber) {
    for (let i = 1; i <= stepNumber; i++) {
        if (!validateCurrentStep(i)) {
            return false;
        }
    }
    return true;
}

function showWizardStep(stepNumber) {
    // Ocultar todos los pasos
    for (let i = 1; i <= totalWizardSteps; i++) {
        const stepContent = document.getElementById(`step${i}`);
        const stepIndicator = document.querySelector(`.wizard-step[data-step="${i}"]`);
        
        if (stepContent) {
            stepContent.classList.remove('active');
        }
        
        if (stepIndicator) {
            stepIndicator.classList.remove('active');
        }
    }
    
    // Mostrar el paso actual
    const currentStepContent = document.getElementById(`step${stepNumber}`);
    const currentStepIndicator = document.querySelector(`.wizard-step[data-step="${stepNumber}"]`);
    
    if (currentStepContent) {
        currentStepContent.classList.add('active');
    }
    
    if (currentStepIndicator) {
        currentStepIndicator.classList.add('active');
    }
    
    // Actualizar navegaci√≥n
    updateWizardNavigation(stepNumber);
}

function changeStep(direction) {
    const newStep = currentWizardStep + direction;
    
    // Validar paso actual antes de avanzar
    if (direction > 0 && !validateCurrentStep()) {
        return;
    }
    
    // Verificar l√≠mites
    if (newStep < 1 || newStep > totalWizardSteps) {
        return;
    }
    
    currentWizardStep = newStep;
    showWizardStep(currentWizardStep);
    updateProgressBar(currentWizardStep);
    updateStepHelpText(currentWizardStep);
    
    // Si llegamos al paso de confirmaci√≥n, generar resumen
    if (currentWizardStep === 4) {
        generateRegistrationSummary();
    }
}

function validateCurrentStep(stepToValidate = null) {
    const stepNumber = stepToValidate || currentWizardStep;
    let isValid = true;
    let requiredFields = [];
    
    // Definir campos requeridos por paso
    switch (stepNumber) {
        case 1: // Informaci√≥n b√°sica
            requiredFields = ['tipoAnimal', 'nombreMascota'];
            break;
        case 2: // Detalles del animal (sin campos obligatorios adicionales)
            break;
        case 3: // Informaci√≥n del propietario
            requiredFields = ['nombrePropietario', 'telefonoPropietario', 'emailPropietario'];
            break;
        case 4: // Confirmaci√≥n (no requiere validaci√≥n)
            return true;
    }
    
    // Validar campos requeridos
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.classList.remove('error');
            
            if (!field.value.trim()) {
                field.classList.add('error');
                isValid = false;
            }
        }
    });
    
    // Validaci√≥n espec√≠fica para email
    if (stepNumber === 3) {
        const emailField = document.getElementById('emailPropietario');
        if (emailField && emailField.value.trim()) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(emailField.value.trim())) {
                emailField.classList.add('error');
                isValid = false;
                showNotification('Por favor, ingresa un email v√°lido', 'error');
            }
        }
    }
    
    if (!isValid) {
        showNotification('Por favor, completa todos los campos requeridos', 'error');
    }
    
    return isValid;
}

function updateWizardNavigation(stepNumber) {
    const prevBtn = document.getElementById('prevStepBtn');
    const nextBtn = document.getElementById('nextStepBtn');
    const submitBtn = document.getElementById('submitRegistrationBtn');
    const stepInfo = document.querySelector('.step-info');
    
    // Actualizar informaci√≥n del paso
    if (stepInfo) {
        stepInfo.textContent = `Paso ${stepNumber} de ${totalWizardSteps}`;
    }
    
    // Controlar visibilidad de botones
    if (prevBtn) {
        prevBtn.style.display = stepNumber === 1 ? 'none' : 'inline-flex';
    }
    
    if (nextBtn) {
        nextBtn.style.display = stepNumber === totalWizardSteps ? 'none' : 'inline-flex';
    }
    
    if (submitBtn) {
        submitBtn.style.display = stepNumber === totalWizardSteps ? 'inline-flex' : 'none';
    }
}

function generateRegistrationSummary() {
    const summaryContainer = document.getElementById('registrationSummary');
    if (!summaryContainer) return;
    
    // Recopilar datos del formulario
    const formData = {
        // Informaci√≥n b√°sica
        tipoAnimal: document.getElementById('tipoAnimal')?.value || '',
        nombreMascota: document.getElementById('nombreMascota')?.value || '',
        
        // Detalles del animal
        razaMascota: document.getElementById('razaMascota')?.value || 'No especificada',
        edadMascota: document.getElementById('edadMascota')?.value || 'No especificada',
        pesoMascota: document.getElementById('pesoMascota')?.value || 'No especificado',
        colorMascota: document.getElementById('colorMascota')?.value || 'No especificado',
        
        // Informaci√≥n del propietario
        nombrePropietario: document.getElementById('nombrePropietario')?.value || '',
        telefonoPropietario: document.getElementById('telefonoPropietario')?.value || '',
        emailPropietario: document.getElementById('emailPropietario')?.value || '',
        direccionPropietario: document.getElementById('direccionPropietario')?.value || 'No especificada',
        contactoEmergencia: document.getElementById('contactoEmergencia')?.value || 'No especificado'
    };
    
    // Generar HTML del resumen
    summaryContainer.innerHTML = `
        <div class="summary-section">
            <h3><i class="fas fa-paw"></i> Informaci√≥n del Animal</h3>
            <div class="summary-grid">
                <div class="summary-item">
                    <strong>Tipo de Animal:</strong>
                    ${formData.tipoAnimal}
                </div>
                <div class="summary-item">
                    <strong>Nombre:</strong>
                    ${formData.nombreMascota}
                </div>
                <div class="summary-item">
                    <strong>Raza:</strong>
                    ${formData.razaMascota}
                </div>
                <div class="summary-item">
                    <strong>Edad:</strong>
                    ${formData.edadMascota}
                </div>
                <div class="summary-item">
                    <strong>Peso:</strong>
                    ${formData.pesoMascota}
                </div>
                <div class="summary-item">
                    <strong>Color:</strong>
                    ${formData.colorMascota}
                </div>
            </div>
        </div>
        
        <div class="summary-section">
            <h3><i class="fas fa-user"></i> Informaci√≥n del Propietario</h3>
            <div class="summary-grid">
                <div class="summary-item">
                    <strong>Nombre:</strong>
                    ${formData.nombrePropietario}
                </div>
                <div class="summary-item">
                    <strong>Tel√©fono:</strong>
                    ${formData.telefonoPropietario}
                </div>
                <div class="summary-item">
                    <strong>Email:</strong>
                    ${formData.emailPropietario}
                </div>
                <div class="summary-item">
                    <strong>Direcci√≥n:</strong>
                    ${formData.direccionPropietario}
                </div>
                <div class="summary-item">
                    <strong>Contacto de Emergencia:</strong>
                    ${formData.contactoEmergencia}
                </div>
            </div>
        </div>
    `;
}

function toggleCollapsible(button) {
    const content = button.nextElementSibling;
    const icon = button.querySelector('i');
    
    if (content.classList.contains('expanded')) {
        content.classList.remove('expanded');
        icon.style.transform = 'rotate(0deg)';
    } else {
        content.classList.add('expanded');
        icon.style.transform = 'rotate(180deg)';
    }
}

function submitRegistration() {
    if (!authSystem || !authSystem.hasPermission('canManagePets')) {
        showNotification('No tienes permiso para registrar mascotas', 'error');
        return;
    }
    // Validar una vez m√°s antes de enviar
    if (!validateAllSteps()) {
        showNotification('Por favor, revisa todos los campos requeridos', 'error');
        return;
    }
    
    try {
        // Recopilar datos del formulario
        const petData = {
            tipo: document.getElementById('tipoAnimal').value,
            nombre: document.getElementById('nombreMascota').value,
            raza: document.getElementById('razaMascota').value || 'No especificada',
            edad: document.getElementById('edadMascota').value || 'No especificada',
            peso: document.getElementById('pesoMascota').value || 'No especificado',
            color: document.getElementById('colorMascota').value || 'No especificado',
            propietario: document.getElementById('nombrePropietario').value,
            telefono: document.getElementById('telefonoPropietario').value,
            email: document.getElementById('emailPropietario').value,
            direccion: document.getElementById('direccionPropietario').value || 'No especificada',
            contactoEmergencia: document.getElementById('contactoEmergencia').value || 'No especificado'
        };
        
        // Registrar la mascota usando el sistema existente
        veterinarySystem.registerPet(petData);
        
        // Mostrar mensaje de √©xito
        showNotification('¬°Mascota registrada exitosamente!', 'success');
        
        // Limpiar formulario y volver al primer paso
        resetRegistrationWizard();
        
        // Actualizar la lista de mascotas si estamos en esa secci√≥n
        if (document.getElementById('mascotasSection').classList.contains('active')) {
            updatePetsList();
        }
        
        // Volver a la secci√≥n de mascotas
        setTimeout(() => {
            showSection('mascotas');
        }, 1500);
        
    } catch (error) {
        console.error('Error al registrar mascota:', error);
        showNotification('Error al registrar la mascota: ' + error.message, 'error');
    }
}

function validateAllSteps() {
    // Validar campos esenciales
    const requiredFields = [
        'tipoAnimal',
        'nombreMascota', 
        'nombrePropietario',
        'telefonoPropietario',
        'emailPropietario'
    ];
    
    for (const fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field || !field.value.trim()) {
            return false;
        }
    }
    
    // Validar email
    const emailField = document.getElementById('emailPropietario');
    if (emailField && emailField.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(emailField.value.trim())) {
            return false;
        }
    }
    
    return true;
}

function resetRegistrationWizard() {
    // Limpiar todos los campos del formulario
    const form = document.getElementById('registroForm');
    if (form) {
        form.reset();
    }
    
    // Volver al primer paso
    currentWizardStep = 1;
    showWizardStep(1);
    
    // Cerrar secciones colapsables
    const collapsibleContents = document.querySelectorAll('.collapsible-content');
    collapsibleContents.forEach(content => {
        content.classList.remove('expanded');
    });
    
    const collapsibleIcons = document.querySelectorAll('.collapsible-toggle i');
    collapsibleIcons.forEach(icon => {
        icon.style.transform = 'rotate(0deg)';
    });
    
    // Limpiar resumen
    const summaryContainer = document.getElementById('registrationSummary');
    if (summaryContainer) {
        summaryContainer.innerHTML = '';
    }
}

function showNotification(message, type = 'success') {
    // Remover notificaci√≥n existente si la hay
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Crear nueva notificaci√≥n
    const notification = document.createElement('div');
    notification.className = `notification ${type === 'error' ? 'notification-error' : ''}`;
    
    const icon = type === 'error' ? 'fas fa-exclamation-triangle' : 'fas fa-check-circle';
    
    notification.innerHTML = `
        <div class="notification-content">
            <i class="${icon}"></i>
            <span>${message}</span>
        </div>
    `;
    
    // Agregar al DOM
    document.body.appendChild(notification);
    
    // Mostrar con animaci√≥n
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // Remover despu√©s de 4 segundos
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 300);
    }, 4000);
}

// ===== CONSULTATION SYSTEM =====
class ConsultationSystem {
    constructor() {
        this.consultations = [];
        this.nextId = 1;
        this.loadFromStorage();
    }

    createConsultation(consultationData) {
        // Validate required fields
        if (!consultationData.petId || !consultationData.reason || !consultationData.description || 
            !consultationData.date || !consultationData.time || !consultationData.veterinarian) {
            throw new Error('Todos los campos obligatorios deben ser completados');
        }

        // Validate date is not in the past
        const consultationDateTime = new Date(`${consultationData.date}T${consultationData.time}`);
        if (consultationDateTime < new Date()) {
            throw new Error('No se pueden programar consultas en fechas pasadas');
        }

        const consultation = {
            id: this.nextId++,
            petId: parseInt(consultationData.petId),
            reason: consultationData.reason,
            description: consultationData.description,
            date: consultationData.date,
            time: consultationData.time,
            veterinarian: consultationData.veterinarian,
            priority: consultationData.priority || 'normal',
            status: 'scheduled',
            createdAt: new Date().toISOString(),
            createdBy: authSystem.getCurrentUser()?.id || 1
        };

        this.consultations.push(consultation);
        this.saveToStorage();
        return consultation;
    }

    getConsultations() {
        return this.consultations;
    }

    getConsultationById(id) {
        return this.consultations.find(c => c.id === id);
    }

    updateConsultationStatus(id, status) {
        const consultation = this.getConsultationById(id);
        if (consultation) {
            consultation.status = status;
            consultation.updatedAt = new Date().toISOString();
            this.saveToStorage();
            return consultation;
        }
        return null;
    }

    deleteConsultation(id) {
        const index = this.consultations.findIndex(c => c.id === id);
        if (index !== -1) {
            this.consultations.splice(index, 1);
            this.saveToStorage();
            return true;
        }
        return false;
    }

    saveToStorage() {
        localStorage.setItem('veterinaryConsultations', JSON.stringify({
            consultations: this.consultations,
            nextId: this.nextId
        }));
    }

    loadFromStorage() {
        const stored = localStorage.getItem('veterinaryConsultations');
        if (stored) {
            const data = JSON.parse(stored);
            this.consultations = data.consultations || [];
            this.nextId = data.nextId || 1;
        }
    }
}

// ===== VETERINARY SYSTEM CLASS =====
class VeterinarySystem {
    constructor() {
        this.pets = [];
        this.nextId = 1;
        this.systemInfo = {
            name: "Veterinaria AnimalCare",
            version: "1.0.0",
            clinicName: "Cl√≠nica Veterinaria AnimalCare",
            clinicAddress: "Calle Principal 123",
            clinicPhone: "300-123-4567"
        };
        
        // Cargar datos guardados
        this.loadFromStorage();
    }

    // Singleton Pattern - Una sola instancia del sistema
    static getInstance() {
        if (!VeterinarySystem.instance) {
            VeterinarySystem.instance = new VeterinarySystem();
        }
        return VeterinarySystem.instance;
    }
    
    // Guardar en localStorage
    saveToStorage() {
        try {
            const data = {
                pets: this.pets,
                nextId: this.nextId
            };
            localStorage.setItem('veterinarySystem', JSON.stringify(data));
            console.log('‚úÖ Datos guardados en localStorage:', data);
            console.log('‚úÖ Total mascotas guardadas:', this.pets.length);
        } catch (error) {
            console.error('‚ùå Error al guardar en localStorage:', error);
        }
    }

    // Cargar desde localStorage
    loadFromStorage() {
        try {
            const saved = localStorage.getItem('veterinarySystem');
            console.log('üì• Datos cargados desde localStorage:', saved);
            if (saved) {
                const data = JSON.parse(saved);
                this.pets = data.pets || [];
                this.nextId = data.nextId || 1;
                console.log('‚úÖ Mascotas cargadas:', this.pets.length);
                console.log('‚úÖ Datos cargados:', this.pets);
            } else {
                console.log('‚ÑπÔ∏è No hay datos guardados, cargando datos de ejemplo');
                // Solo cargar datos de ejemplo si no hay datos guardados
                this.loadExampleData();
            }
        } catch (error) {
            console.error('‚ùå Error al cargar desde localStorage:', error);
            this.loadExampleData();
        }
    }

    // Cargar datos de ejemplo solo si no hay datos guardados
    loadExampleData() {
        console.log('üîÑ Cargando datos de ejemplo...');
        const examplePets = [
            {
            name: "Max",
            age: 3,
            breed: "Labrador Retriever",
                type: "dog",
                owner: "Juan P√©rez"
            },
            {
            name: "Luna",
            age: 2,
                breed: "Persian",
                type: "cat", 
                owner: "Mar√≠a Garc√≠a"
            },
            {
                name: "Kiwi",
                age: 1,
                breed: "Macaw",
                type: "bird",
                owner: "Roberto Silva"
            }
        ];

        examplePets.forEach(petData => {
            console.log('üîÑ Registrando mascota de ejemplo:', petData.name);
            const pet = this.createAnimal(
                petData.type,
                petData.name,
                petData.age,
                petData.breed,
                petData.owner
            );
            this.registerPet(pet);
        });
        
        console.log('‚úÖ Datos de ejemplo cargados. Total mascotas:', this.pets.length);
    }
    
    // Factory Method Pattern - Crear diferentes tipos de animales
    createAnimal(type, name, age, breed, owner) {
        const animalTypes = {
            'dog': 'Perro',
            'cat': 'Gato', 
            'bird': 'Ave',
            'reptile': 'Reptil'
        };
        
        return {
            id: this.nextId++,
            name: name,
            age: age,
            breed: breed,
            type: type,
            typeName: animalTypes[type] || 'Animal',
            owner: owner,
            familyType: this.getFamilyType(type),
            registrationDate: new Date().toISOString(),
            status: 'Activo',
            vaccinationStatus: 'Pendiente',
            allergies: [],
            chronicConditions: []
        };
    }

    // Obtener razas por tipo de animal
    getBreedsByType(animalType) {
        const breeds = {
            'dog': [
                'Labrador Retriever', 'Golden Retriever', 'Pastor Alem√°n', 'Bulldog Franc√©s',
                'Beagle', 'Poodle', 'Rottweiler', 'Yorkshire Terrier', 'Chihuahua',
                'Husky Siberiano', 'Border Collie', 'Doberman', 'Boxer', 'Malt√©s',
                'Shih Tzu', 'Pomerania', 'D√°lmata', 'San Bernardo', 'Mast√≠n',
                'Escribir manualmente'
            ],
            'cat': [
                'Persa', 'Siam√©s', 'Maine Coon', 'Ragdoll', 'British Shorthair',
                'Sphynx', 'Bengal√≠', 'Abisinio', 'Siberiano', 'Birmano',
                'Scottish Fold', 'Devon Rex', 'Cornish Rex', 'Oriental', 'Bombay',
                'Himalayo', 'Angora Turco', 'Manx', 'Somal√≠', 'Tonkin√©s',
                'Escribir manualmente'
            ],
            'bird': [
                'Canario', 'Periquito', 'Cockatiel', 'Agapornis', 'Diamante Mandar√≠n',
                'Pinz√≥n Cebra', 'Jilguero', 'Ruise√±or', 'Cardenal', 'Azulejo',
                'Cacat√∫a', 'Guacamayo', 'Loro Gris Africano', 'Perico Australiano',
                'Ninfa', 'Cotorra', 'Tuc√°n', 'Colibr√≠', 'Pavo Real',
                'Escribir manualmente'
            ],
            'reptile': [
                'Drag√≥n Barbudo', 'Gecko Leopardo', 'Iguana Verde', 'Camale√≥n',
                'Tortuga de Agua', 'Tortuga Terrestre', 'Serpiente de Ma√≠z',
                'Pit√≥n Real', 'Anolis', 'Escinco de Lengua Azul', 'Uromastyx',
                'Tegu', 'Monstruo de Gila', 'Drag√≥n de Agua', 'Basilisco',
                'Camale√≥n Pantera', 'Gecko Crestado', 'Serpiente Rey',
                'Escribir manualmente'
            ]
        };
        return breeds[animalType] || ['Escribir manualmente'];
    }

    // Abstract Factory Pattern - Familias de mascotas
    getFamilyType(animalType) {
        const domesticTypes = ['dog', 'cat'];
        return domesticTypes.includes(animalType) ? 'domestic' : 'exotic';
    }
    
    getFamilyCharacteristics(familyType) {
        const characteristics = {
            'domestic': ['Compa√±√≠a', 'Protecci√≥n', 'Entretenimiento', 'Terapia'],
            'exotic': ['Colecci√≥n', 'Educaci√≥n', 'Conservaci√≥n', 'Investigaci√≥n']
        };
        return characteristics[familyType] || [];
    }

    // Builder Pattern - Construir registros complejos
    buildPet(name, age, breed, type, owner, options = {}) {
        const pet = this.createAnimal(type, name, age, breed, owner);
        
        // Aplicar opciones adicionales
        if (options.phone) pet.ownerPhone = options.phone;
        if (options.email) pet.ownerEmail = options.email;
        if (options.emergencyContact) pet.emergencyContact = options.emergencyContact;
        if (options.allergies) pet.allergies = options.allergies;
        if (options.chronicConditions) pet.chronicConditions = options.chronicConditions;
        if (options.vaccinationStatus) pet.vaccinationStatus = options.vaccinationStatus;
        
        return pet;
    }

    // Prototype Pattern - Clonar mascotas
    clonePet(originalPet, newName) {
        const cloned = {
            ...originalPet,
            id: this.nextId++,
            name: newName,
            registrationDate: new Date().toISOString()
        };
        return cloned;
    }

    // M√©todos de gesti√≥n
    registerPet(pet) {
        console.log('üîµ Registrando mascota en VeterinarySystem:', pet);
        this.pets.push(pet);
        console.log('üîµ Total mascotas despu√©s del push:', this.pets.length);
        console.log('üîµ Array de mascotas:', this.pets);
        this.saveToStorage(); // Guardar autom√°ticamente
        console.log('üîµ Mascota registrada exitosamente');
        return pet;
    }

    getAllPets() {
        return this.pets;
    }

    searchPets(query) {
        const lowerQuery = query.toLowerCase();
        return this.pets.filter(pet => 
            pet.name.toLowerCase().includes(lowerQuery) ||
            pet.breed.toLowerCase().includes(lowerQuery) ||
            pet.owner.toLowerCase().includes(lowerQuery) ||
            pet.typeName.toLowerCase().includes(lowerQuery)
        );
    }

    // B√∫squeda avanzada con m√∫ltiples filtros
    advancedSearchPets(filters) {
        return this.pets.filter(pet => {
            // Filtro por nombre de mascota
            if (filters.petName && !pet.name.toLowerCase().includes(filters.petName.toLowerCase())) {
                return false;
            }
            
            // Filtro por propietario
            if (filters.owner && !pet.owner.toLowerCase().includes(filters.owner.toLowerCase())) {
                return false;
            }
            
            // Filtro por tipo de animal
            if (filters.animalType && pet.typeName.toLowerCase() !== filters.animalType.toLowerCase()) {
                return false;
            }
            
            // Filtro por raza
            if (filters.breed && !pet.breed.toLowerCase().includes(filters.breed.toLowerCase())) {
                return false;
            }
            
            // Filtro por rango de edad
            if (filters.minAge !== undefined && filters.minAge !== '' && pet.age < parseInt(filters.minAge)) {
                return false;
            }
            if (filters.maxAge !== undefined && filters.maxAge !== '' && pet.age > parseInt(filters.maxAge)) {
                return false;
            }
            
            // Filtro por familia
            if (filters.family && pet.family && !pet.family.toLowerCase().includes(filters.family.toLowerCase())) {
                return false;
            }
            
            // Filtro por estado de vacunaci√≥n
            if (filters.vaccinationStatus && filters.vaccinationStatus !== 'all') {
                const isVaccinated = pet.vaccinated === true || pet.vaccinated === 'true';
                if (filters.vaccinationStatus === 'vaccinated' && !isVaccinated) {
                    return false;
                }
                if (filters.vaccinationStatus === 'not_vaccinated' && isVaccinated) {
                    return false;
                }
            }
            
            return true;
        });
    }

    getPetById(id) {
        return this.pets.find(pet => pet.id === id);
    }

    updatePet(id, updatedData) {
        const petIndex = this.pets.findIndex(pet => pet.id === id);
        if (petIndex !== -1) {
            this.pets[petIndex] = { ...this.pets[petIndex], ...updatedData };
            this.saveToStorage(); // Guardar autom√°ticamente
            return this.pets[petIndex];
        }
        return null;
    }

    deletePet(id) {
        const petIndex = this.pets.findIndex(pet => pet.id === id);
        if (petIndex !== -1) {
            const deletedPet = this.pets.splice(petIndex, 1)[0];
            this.saveToStorage(); // Guardar autom√°ticamente
            return deletedPet;
        }
        return null;
    }

    getSystemStats() {
        const stats = {
            totalPets: this.pets.length,
            byType: {},
            byFamily: { domestic: 0, exotic: 0 },
            lastUpdated: new Date().toLocaleString()
        };

        this.pets.forEach(pet => {
            stats.byType[pet.typeName] = (stats.byType[pet.typeName] || 0) + 1;
            stats.byFamily[pet.familyType] = (stats.byFamily[pet.familyType] || 0) + 1;
        });

        return stats;
    }
}

// Inicializar el sistema
    veterinarySystem = VeterinarySystem.getInstance();

// Funciones para manejar el selector de razas din√°mico
function updateBreedOptions() {
    const animalTypeSelect = document.getElementById('animal_type');
    const breedSelect = document.getElementById('breed');
    const breedInput = document.getElementById('breed_input');
    
    if (!animalTypeSelect || !breedSelect) {
        console.error('Elementos del selector de razas no encontrados');
        return;
    }
    
    const selectedType = animalTypeSelect.value;
    console.log('Tipo de animal seleccionado:', selectedType);
    
    if (!selectedType) {
        breedSelect.innerHTML = '<option value="">Selecciona una raza</option>';
        return;
    }
    
    const breeds = veterinarySystem.getBreedsByType(selectedType);
    console.log('Razas disponibles:', breeds);
    
    // Limpiar opciones actuales
    breedSelect.innerHTML = '';
    
    // Agregar nuevas opciones
    breeds.forEach(breed => {
        const option = document.createElement('option');
        option.value = breed;
        option.textContent = breed;
        breedSelect.appendChild(option);
    });
    
    // Resetear el input manual
    if (breedInput) {
        breedInput.style.display = 'none';
        breedInput.value = '';
    }
    
    // Asegurar que el select est√© visible
    breedSelect.style.display = 'block';
}

function getSelectedBreed() {
    console.log('üîç === GETSELECTEDBREED DEBUGGING ===');
    
    const breedSelect = document.getElementById('breed');
    const breedInput = document.getElementById('breed_input');
    
    console.log('üîç breedSelect encontrado:', !!breedSelect);
    console.log('üîç breedInput encontrado:', !!breedInput);
    
    if (!breedSelect) {
        console.error('‚ùå Elemento breed no encontrado');
        return '';
    }
    
    console.log('üîç breedSelect.value:', breedSelect.value);
    console.log('üîç breedSelect.style.display:', breedSelect.style.display);
    
    if (breedInput) {
        console.log('üîç breedInput.value:', breedInput.value);
        console.log('üîç breedInput.style.display:', breedInput.style.display);
        console.log('üîç breedInput.offsetParent:', breedInput.offsetParent);
        
        // Verificar si el input est√° visible usando m√∫ltiples m√©todos
        const isInputVisible = breedInput.style.display === 'block' || 
                              breedInput.style.display !== 'none' ||
                              breedInput.offsetParent !== null;
        
        console.log('üîç ¬øInput manual visible?:', isInputVisible);
        
        if (isInputVisible && breedInput.value.trim() !== '') {
            console.log('üîç Usando valor del input manual:', breedInput.value);
            return breedInput.value;
        }
    }
    
    // Usar el valor del select
    const selectedValue = breedSelect.value;
    console.log('üîç Usando valor del select:', selectedValue);
    
    // Validar que no sea "Escribir manualmente" o vac√≠o
    if (selectedValue === 'Escribir manualmente' || selectedValue === '' || !selectedValue) {
        console.error('‚ùå Raza inv√°lida:', selectedValue);
        return '';
    }
    
    console.log('üîç === FIN GETSELECTEDBREED ===');
    return selectedValue;
}

// Funciones de la interfaz
function configureNavigation() {
    console.log('üîó Configurando navegaci√≥n...');
    
    // Simple approach: add onclick directly to each link
    const navLinks = document.querySelectorAll('.nav-link');
    console.log('üîó Enlaces encontrados:', navLinks.length);
    
    navLinks.forEach((link, index) => {
        const sectionId = link.getAttribute('href').substring(1);
        console.log(`  ${index + 1}. ${link.textContent.trim()} -> ${sectionId}`);
        
        // Add onclick directly
        link.onclick = function(e) {
            e.preventDefault();
            console.log('üîó Click en:', this.textContent.trim());
            showSection(sectionId);
            return false;
        };
    });
    
    console.log('‚úÖ Navegaci√≥n configurada');
}

function showSection(sectionId) {
    console.log('üìÑ Mostrando secci√≥n:', sectionId);

    // Verificar permisos por secci√≥n
    const sectionPermissions = {
        'registro': 'canManagePets',
        'registros': 'canViewAllData',
        'consultas': 'canManageAppointments',
        'citas-medicas': 'canManageAppointments'
    };
    const requiredPermission = sectionPermissions[sectionId];
    if (requiredPermission && (!authSystem || !authSystem.hasPermission(requiredPermission))) {
        showMessage('No tienes permiso para acceder a esta secci√≥n', 'error');
        sectionId = 'inicio';
    }
    
    // Ocultar todas las secciones
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // Mostrar la secci√≥n seleccionada
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
        console.log('‚úÖ Secci√≥n mostrada:', sectionId);
    } else {
        console.error('‚ùå Secci√≥n no encontrada:', sectionId);
    }
    
    // Actualizar navegaci√≥n
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    
    const activeLink = document.querySelector(`[href="#${sectionId}"]`);
    if (activeLink) {
        activeLink.classList.add('active');
    }
}


function registerPet() {
    console.log('=== INICIANDO REGISTRO DE MASCOTA ===');
    
    const form = document.getElementById('registroForm');
    if (!form) {
        console.error('Formulario no encontrado');
        return;
    }
    
    const formData = new FormData(form);
    
    // Debugging detallado de cada campo
    console.log('üîç === DEBUGGING FORMULARIO ===');
    console.log('üîç name:', formData.get('name'));
    console.log('üîç age:', formData.get('age'));
    console.log('üîç animalType:', formData.get('animalType'));
    console.log('üîç owner:', formData.get('ownerName'));
    console.log('üîç phone:', formData.get('ownerPhone'));
    console.log('üîç email:', formData.get('ownerEmail'));
    
    // Debugging del selector de razas
    const breedSelectElement = document.getElementById('breed');
    const breedInputElement = document.getElementById('breed_input');
    console.log('üîç breedSelect:', breedSelectElement);
    console.log('üîç breedSelect.value:', breedSelectElement ? breedSelectElement.value : 'NO ENCONTRADO');
    console.log('üîç breedInput:', breedInputElement);
    console.log('üîç breedInput.value:', breedInputElement ? breedInputElement.value : 'NO ENCONTRADO');
    console.log('üîç breedInput.style.display:', breedInputElement ? breedInputElement.style.display : 'NO ENCONTRADO');
    
    const selectedBreed = getSelectedBreed();
    console.log('üîç Raza seleccionada por getSelectedBreed():', selectedBreed);
    
    const petData = {
        name: formData.get('name'),
        age: parseInt(formData.get('age')),
        breed: selectedBreed,
        type: formData.get('animalType'),
        owner: formData.get('ownerName'),
        phone: formData.get('ownerPhone'),
        email: formData.get('ownerEmail')
    };
    
    console.log('üîç === FIN DEBUGGING FORMULARIO ===');
    console.log('Datos del formulario:', petData);
    console.log('Raza obtenida:', petData.breed);
    
    if (!petData.name || !petData.age || !petData.breed || !petData.type || !petData.owner || !petData.phone) {
        console.error('‚ùå Campos obligatorios faltantes:', {
            name: petData.name,
            age: petData.age,
            breed: petData.breed,
            type: petData.type,
            owner: petData.owner,
            phone: petData.phone
        });
        
        // Crear mensaje espec√≠fico de campos faltantes
        const camposFaltantes = [];
        if (!petData.name) camposFaltantes.push('Nombre de la mascota');
        if (!petData.age) camposFaltantes.push('Edad');
        if (!petData.breed) camposFaltantes.push('Raza');
        if (!petData.type) camposFaltantes.push('Tipo de animal');
        if (!petData.owner) camposFaltantes.push('Nombre del due√±o');
        if (!petData.phone) camposFaltantes.push('Tel√©fono');
        
        const mensaje = `Campos obligatorios faltantes: ${camposFaltantes.join(', ')}`;
        showMessage(mensaje, 'error');
        return;
    }
    
    // Validar que el nombre del due√±o tenga apellido (al menos 2 palabras)
    if (petData.owner && petData.owner.trim().split(' ').length < 2) {
        console.error('‚ùå Nombre del due√±o debe incluir apellido');
        showMessage('El nombre del due√±o debe incluir nombre y apellido', 'error');
        return;
    }
    
    // Validar que el tel√©fono tenga al menos n√∫meros
    if (petData.phone && !/\d/.test(petData.phone)) {
        console.error('‚ùå Tel√©fono debe contener al menos n√∫meros');
        showMessage('El tel√©fono debe contener al menos n√∫meros', 'error');
        return;
    }
    
    if (petData.breed === 'Escribir manualmente' || petData.breed.trim() === '') {
        console.error('‚ùå Raza inv√°lida:', petData.breed);
        showMessage('Por favor selecciona o escribe una raza v√°lida', 'error');
        return;
    }
    
    // Validaci√≥n adicional de edad
    if (isNaN(petData.age) || petData.age <= 0) {
        console.error('‚ùå Edad inv√°lida:', petData.age);
        showMessage('Por favor ingresa una edad v√°lida', 'error');
        return;
    }
    
    console.log('‚úÖ Todos los campos son v√°lidos, procediendo con el registro...');
    
    console.log('Creando mascota con datos v√°lidos...');
    const pet = veterinarySystem.buildPet(
        petData.name,
        petData.age,
        petData.breed,
        petData.type,
        petData.owner,
        {
            phone: petData.phone,
            email: petData.email
        }
    );
    
    console.log('Mascota creada:', pet);
    
    console.log('Registrando mascota en el sistema...');
    veterinarySystem.registerPet(pet);
    
    console.log('Total mascotas despu√©s del registro:', veterinarySystem.getAllPets().length);
    
    form.reset();
    
    // Resetear el selector de razas
    const breedSelectReset = document.getElementById('breed');
    const breedInputReset = document.getElementById('breed_input');
    if (breedSelectReset) breedSelectReset.style.display = 'block';
    if (breedInputReset) breedInputReset.style.display = 'none';
    
    showMessage('Mascota registrada exitosamente con ID: ' + pet.id, 'success');
    
    console.log('Actualizando lista de mascotas...');
    updatePetsList();
    showSystemStats();
    
    console.log('=== REGISTRO COMPLETADO ===');
}

function searchPets() {
    const query = document.getElementById('search-input').value.trim();
    if (!query) {
        showMessage('Ingresa un t√©rmino de b√∫squeda', 'warning');
        return;
    }
    
    const results = veterinarySystem.searchPets(query);
    displaySearchResults(results);
}

function displaySearchResults(results) {
    const container = document.getElementById('search-results');
    if (!container) return;
    
    if (results.length === 0) {
        container.innerHTML = '<div class="no-results">No se encontraron mascotas con ese t√©rmino</div>';
        return;
    }
    
    let html = '<div class="results-grid">';
    results.forEach(pet => {
        html += `
            <div class="pet-card">
                <h4>${pet.name}</h4>
                <p><strong>Raza:</strong> ${pet.breed}</p>
                <p><strong>Tipo:</strong> ${pet.typeName}</p>
                <p><strong>Edad:</strong> ${pet.age} a√±os</p>
                <p><strong>Due√±o:</strong> ${pet.owner}</p>
                <p><strong>Familia:</strong> ${pet.familyType}</p>
                <p><strong>Estado:</strong> ${pet.status}</p>
            </div>
        `;
    });
    html += '</div>';
    container.innerHTML = html;
}

function updatePetsList(filterName = null) {
    console.log('üü° === ACTUALIZANDO LISTA DE MASCOTAS ===');
    const pets = veterinarySystem.getAllPets();
    const container = document.getElementById('petsTableBody');
    
    console.log('üü° Mascotas obtenidas del sistema:', pets);
    console.log('üü° Cantidad de mascotas:', pets.length);
    console.log('üü° Container encontrado:', container);
    
    if (!container) {
        console.error('‚ùå Container petsTableBody no encontrado');
        return;
    }
    
    if (pets.length === 0) {
        console.log('üü° No hay mascotas, mostrando mensaje vac√≠o');
        container.innerHTML = '<tr><td colspan="8" class="text-center">No hay mascotas registradas</td></tr>';
        return;
    }
    
    // Aplicar filtro por nombre si corresponde
    let filteredPets = pets;
    const query = filterName !== null ? filterName : (document.getElementById('petSearchInput')?.value || '').trim().toLowerCase();
    if (query) {
        filteredPets = pets.filter(p => (p.name || '').toLowerCase().includes(query));
    }

    console.log('üü° Generando HTML para', filteredPets.length, 'mascotas');
    let html = '';
    filteredPets.forEach((pet, index) => {
        console.log(`üü° Procesando mascota ${index + 1}:`, pet);
        html += `
        <tr>
            <td>${pet.id}</td>
            <td>${pet.name}</td>
            <td>${pet.age}</td>
            <td>${pet.breed}</td>
            <td>${pet.typeName}</td>
            <td>${pet.familyType}</td>
            <td>${pet.owner}</td>
            <td>
                <div class="action-buttons">
                    ${authSystem && authSystem.hasPermission('canManagePets') ? `
                        <button onclick="editPet(${pet.id})" class="btn btn-primary btn-sm">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button onclick="clonePet(${pet.id})" class="btn btn-secondary btn-sm">
                            <i class="fas fa-copy"></i> Clonar
                        </button>
                        <button onclick="deletePet(${pet.id})" class="btn btn-danger btn-sm">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    ` : `
                        <span class="text-muted">Sin permisos para acciones</span>
                    `}
                </div>
            </td>
        </tr>
        `;
    });
    
    console.log('üü° HTML generado:', html);
    container.innerHTML = html;
    console.log('üü° === LISTA ACTUALIZADA ===');
}

// Buscar por nombre desde la barra con lupa
function filterPetsByName() {
    const input = document.getElementById('petSearchInput');
    const value = (input?.value || '').trim().toLowerCase();
    updatePetsList(value);
}

function editPet(petId) {
    if (!authSystem || !authSystem.hasPermission('canManagePets')) {
        showMessage('No tienes permiso para editar mascotas', 'error');
        return;
    }
    const pet = veterinarySystem.getPetById(petId);
    if (!pet) {
        showMessage('Mascota no encontrada', 'error');
        return;
    }
    
    // Crear formulario de edici√≥n
    const editForm = document.createElement('div');
    editForm.className = 'edit-modal';
    editForm.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>Editar Mascota: ${pet.name}</h3>
                <button onclick="closeEditModal()" class="close-btn">&times;</button>
            </div>
            <form id="editPetForm" class="edit-form">
                <div class="form-group">
                    <label for="editName">Nombre *</label>
                    <input type="text" id="editName" name="name" value="${pet.name}" required>
                </div>
                <div class="form-group">
                    <label for="editAge">Edad *</label>
                    <input type="number" id="editAge" name="age" value="${pet.age}" required>
                </div>
                <div class="form-group">
                    <label for="editBreed">Raza *</label>
                    <input type="text" id="editBreed" name="breed" value="${pet.breed}" required>
                </div>
                <div class="form-group">
                    <label for="editOwner">Due√±o *</label>
                    <input type="text" id="editOwner" name="owner" value="${pet.owner}" required>
                </div>
                <div class="form-group">
                    <label for="editPhone">Tel√©fono</label>
                    <input type="text" id="editPhone" name="phone" value="${pet.ownerPhone || ''}">
                </div>
                <div class="form-group">
                    <label for="editEmail">Email</label>
                    <input type="email" id="editEmail" name="email" value="${pet.ownerEmail || ''}">
                </div>
                <div class="form-actions">
                    <button type="button" onclick="closeEditModal()" class="btn btn-secondary">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                </div>
            </form>
        </div>
    `;
    
    document.body.appendChild(editForm);
    
    // Manejar env√≠o del formulario
    document.getElementById('editPetForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        const updatedData = {
            name: formData.get('name'),
            age: parseInt(formData.get('age')),
            breed: formData.get('breed'),
            owner: formData.get('owner'),
            ownerPhone: formData.get('phone'),
            ownerEmail: formData.get('email')
        };
        
        if (!authSystem || !authSystem.hasPermission('canManagePets')) {
            showMessage('No tienes permiso para actualizar mascotas', 'error');
            return;
        }
        
        const updatedPet = veterinarySystem.updatePet(petId, updatedData);
        if (updatedPet) {
            showMessage('Mascota actualizada exitosamente', 'success');
            updatePetsList();
            showSystemStats();
            closeEditModal();
        } else {
            showMessage('Error al actualizar la mascota', 'error');
        }
    });
}

// Variable global para almacenar el ID de la mascota a eliminar

function deletePet(petId) {
    if (!authSystem || !authSystem.hasPermission('canManagePets')) {
        showMessage('No tienes permiso para eliminar mascotas', 'error');
        return;
    }
    const pet = veterinarySystem.getPetById(petId);
    if (!pet) {
        showMessage('Mascota no encontrada', 'error');
        return;
    }
    
    // Almacenar el ID para confirmaci√≥n posterior
    petToDelete = petId;
    
    // Mostrar informaci√≥n de la mascota en el modal
    document.getElementById('deletePetName').textContent = pet.name;
    document.getElementById('deletePetOwner').textContent = pet.owner;
    
    // Mostrar el modal
    document.getElementById('deleteModal').style.display = 'flex';
}

function closeDeleteModal() {
    document.getElementById('deleteModal').style.display = 'none';
    petToDelete = null;
}

function confirmDelete() {
    if (!authSystem || !authSystem.hasPermission('canManagePets')) {
        showMessage('No tienes permiso para eliminar mascotas', 'error');
        closeDeleteModal();
        return;
    }
    if (petToDelete) {
        const deletedPet = veterinarySystem.deletePet(petToDelete);
        if (deletedPet) {
            showMessage(`Mascota ${deletedPet.name} eliminada exitosamente`, 'success');
            updatePetsList();
            showSystemStats();
        } else {
            showMessage('Error al eliminar la mascota', 'error');
        }
        closeDeleteModal();
    }
}

function closeEditModal() {
    const modal = document.querySelector('.edit-modal');
    if (modal) {
        modal.remove();
    }
}

function clonePet(petId) {
    if (!authSystem || !authSystem.hasPermission('canManagePets')) {
        showMessage('No tienes permiso para clonar mascotas', 'error');
        return;
    }
    const originalPet = veterinarySystem.getPetById(petId);
    if (!originalPet) {
        showMessage('Mascota no encontrada', 'error');
        return;
    }
    
    const newName = prompt('Ingresa el nuevo nombre para la mascota clonada:', originalPet.name + ' Jr');
    if (!newName) return;
    
    const clonedPet = veterinarySystem.clonePet(originalPet, newName);
    veterinarySystem.registerPet(clonedPet);
    
    showMessage('Mascota clonada exitosamente: ' + clonedPet.name, 'success');
    updatePetsList();
}

function showSystemStats() {
    console.log('üü¢ === MOSTRANDO ESTAD√çSTICAS ===');
    const stats = veterinarySystem.getSystemStats();
    console.log('üü¢ Estad√≠sticas obtenidas:', stats);
    
    // Update individual stat elements
    const totalPetsElement = document.getElementById('totalPets');
    if (totalPetsElement) {
        totalPetsElement.textContent = stats.totalPets;
        console.log('‚úÖ Total mascotas actualizado:', stats.totalPets);
    } else {
        console.error('‚ùå Elemento totalPets no encontrado');
    }
    
    console.log('üü¢ Estad√≠sticas actualizadas correctamente');
}

function showMessage(message, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message message-${type}`;
    messageDiv.textContent = message;
    
    // Agregar al DOM
    document.body.appendChild(messageDiv);
    
    // Remover despu√©s de 3 segundos
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.parentNode.removeChild(messageDiv);
        }
    }, 3000);
}

